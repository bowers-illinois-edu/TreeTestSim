% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/tree_test_sims.R
\name{children_indices}
\alias{children_indices}
\title{Get Children of a Node in a k-ary Tree}
\usage{
children_indices(d, j, tree_info)
}
\arguments{
\item{d}{Integer; the current level or depth of the node (0-based).}

\item{j}{Integer; the node's local index within level \code{d} (1-based) -- a function of k (number of nodes per level)}

\item{tree_info}{A list such as the one returned by \code{\link{get_level_info}}}
}
\value{
An integer vector of global indices of the children.
}
\description{
Given a node's level \code{d} and local index \code{j} in a
k-ary tree, return the global indices of its \code{k} children (if \code{d <
l}) using a 1-based indexing system given the way R indexes. When d=0, j must be 1 since we only have one root node.
}
\details{
We assume a level-by-level storage scheme:
\itemize{
\item Level \eqn{d} has \eqn{k^d} nodes.
\item The children of local node j in level d, \eqn{(d, j)}, are those with local indices \eqn{k(j-1)+1, \ldots, k(j-1)+k} in level
\eqn{d+1}.
\item The function returns an empty integer vector if \eqn{d=l} (a leaf). }
}
\examples{
info <- get_level_info(k = 2, l = 2)
# Root is at level d=0, j=1 => children are global indices 2 and 3
children_indices(d = 0, j = 1, tree_info = info)
# Next look at level 1 where we have 2 nodes # d=1, j=1 => global index node 2 => children are 4 and 5
children_indices(d = 1, j = 1, tree_info = info)
# d=1, j=2 ==> the global indx node 3 => children are nodes 6 and 7
children_indices(d = 1, j = 2, tree_info = info)
}
\seealso{
\code{\link{get_level_info}}
}
