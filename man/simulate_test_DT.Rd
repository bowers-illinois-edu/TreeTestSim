% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data_table_approach.R
\name{simulate_test_DT}
\alias{simulate_test_DT}
\title{Simulate the Testing Procedure on a k-ary Tree (data.table version)}
\usage{
simulate_test_DT(
  treeDT,
  alpha,
  k,
  effN,
  N_total,
  beta_base,
  adj_effN = TRUE,
  local_adj_p_fn = local_simes,
  return_details = TRUE
)
}
\arguments{
\item{treeDT}{A data.table as produced by \code{generate_tree_DT()}.}

\item{alpha}{Numeric. The significance level.}

\item{k}{Integer. The branching factor.}

\item{effN}{Numeric. The effective sample size at the root (assumed to decrease by a factor of k per level).}

\item{N_total}{Numeric. The total sample size at the root. For now effN should be same as N_total}

\item{beta_base}{Numeric. The base parameter for the beta distribution.}
}
\value{
A list with components:
\describe{
\item{treeDT}{The data.table augmented with a column \code{p_val} for the simulated p-value.}
\item{false_error}{A logical flag equal to TRUE if any truly null node (nonnull == FALSE)
that was tested yielded \(\texttt{p_val} \le \alpha\).}
}
}
\description{
Simulates the hierarchical testing procedure on a complete k-ary tree (given as a data.table).
The procedure works level-by-level. At the root the test is performed using parent p = 0.
For each active node (one that is "tested" because its parent's p-value was \(\le \alpha\)),
a local p-value is simulated:

\itemize{
\item For a non-null node:
[ p_{\text{local}} = \text{parent}\emph{p + (1-\text{parent}\emph{p) \times \mathrm{rbeta}(1,\, \beta}{\text{base}} \times \sqrt{effN/N}{\text{total}}},\, 1) ]
\item For a null node:
[ p_{\text{local}} \sim \mathrm{Uniform}(\text{parent}_p,1). ]
}

Then, each child’s final p-value is defined as
[ p_{\text{child}} = \max(\text{parent}\emph{p,\, p}{\text{local}}), ]
and for each parent the children are combined using a Simes test.
If the Simes p-value exceeds \(\alpha\), that branch is gated (the children’s p-values remain NA).
}
\examples{
dt <- generate_tree_DT(max_level = 3, k = 3, t = 0.2)
res <- simulate_test_DT(dt, alpha = 0.05, k = 3, effN = 1000, N_total = 1000, beta_base = 0.1)
print(res$treeDT)

}
